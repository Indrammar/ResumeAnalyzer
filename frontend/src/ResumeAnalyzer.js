import React, { useState, useRef } from "react";
import {
  Card,
  CardContent,
  Typography,
  Button,
  TextField,
  LinearProgress,
  Grid,
  List,
  ListItem,
  ListItemText,
  Chip,
  Box,
} from "@mui/material";
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  Legend,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
} from "recharts";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

function ResumeAnalyzer() {
  const [jobRole, setJobRole] = useState("");
  const [resumeFile, setResumeFile] = useState(null);
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);

  const reportRef = useRef();

  // Backend API URL from environment
  const API_URL = process.env.REACT_APP_API_URL;

  // Upload resume
  const handleFileChange = (e) => {
    setResumeFile(e.target.files[0]);
  };

  // Analyze resume
  const handleAnalyze = async () => {
    if (!resumeFile) {
      alert("‚ö†Ô∏è Please upload your resume (PDF/DOCX) before analyzing!");
      return;
    }

    const formData = new FormData();
    formData.append("resume", resumeFile);
    formData.append("jd", jobRole);

    try {
      setLoading(true);
      const response = await fetch(`${API_URL}/analyze`, {
        method: "POST",
        body: formData,
      });
      const data = await response.json();
      setLoading(false);

      if (response.ok) {
        setResults(data);
      } else {
        alert(data.error || "Something went wrong!");
      }
    } catch (error) {
      setLoading(false);
      console.error("Error:", error);
      alert("‚ùå Failed to connect to backend.");
    }
  };

  // Download report as PDF
  const handleDownloadPDF = () => {
    const input = reportRef.current;
    const pdf = new jsPDF("p", "mm", "a4");

    // Cover Page
    pdf.setFontSize(22);
    pdf.text("üìÑ Smart Resume Analyzer Report", 20, 40);

    pdf.setFontSize(14);
    pdf.text(
      `Candidate: ${resumeFile ? resumeFile.name.replace(/\.[^/.]+$/, "") : "N/A"}`,
      20,
      70
    );
    pdf.text(`Job Role: ${results.job_role}`, 20, 85);
    pdf.text(`Score: ${results.score}%`, 20, 100);
    pdf.text(`Date: ${new Date().toLocaleDateString()}`, 20, 115);

    pdf.setFontSize(12);
    pdf.text(
      "This report highlights matched skills, missing skills, and recommendations.",
      20,
      140
    );

    pdf.setFontSize(10);
    pdf.text("Generated by Smart Resume Analyzer", 20, 280);

    // Capture results section
    html2canvas(input, { scale: 2 }).then((canvas) => {
      const imgData = canvas.toDataURL("image/png");
      const imgWidth = 190;
      const pageHeight = 297;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      pdf.addPage();
      pdf.addImage(imgData, "PNG", 10, 10, imgWidth, imgHeight);

      pdf.save("Resume_Analysis_Report.pdf");
    });
  };

  const COLORS = ["#28a745", "#981f2bff"];

  return (
    <Card>
      <CardContent>
        <Typography variant="h5" gutterBottom>
          üìÑ Resume Analyzer
        </Typography>

        {/* Job Role Input */}
        <TextField
          label="Enter Job Role or paste JD text"
          variant="outlined"
          fullWidth
          multiline
          rows={2}
          value={jobRole}
          onChange={(e) => setJobRole(e.target.value)}
          sx={{ mb: 2 }}
        />

        {/* Resume Upload */}
        <Button variant="contained" component="label" sx={{ mr: 2 }}>
          Upload Resume
          <input type="file" hidden accept=".pdf,.docx" onChange={handleFileChange} />
        </Button>
        {resumeFile && (
          <Typography variant="body2" sx={{ display: "inline-block" }}>
            üìé {resumeFile.name}
          </Typography>
        )}

        {/* Analyze Button */}
        <Box sx={{ mt: 2 }}>
          <Button variant="contained" color="secondary" onClick={handleAnalyze}>
            Analyze
          </Button>
        </Box>

        {loading && <LinearProgress sx={{ mt: 2 }} />}

        {/* Results */}
        {results && (
          <Box ref={reportRef} sx={{ mt: 4 }}>
            <Typography variant="h6">üîé Results:</Typography>
            <Typography>
              <strong>Job Role:</strong> {results.job_role}
            </Typography>
            <Typography>
              <strong>Score:</strong> {results.score}%
            </Typography>

            {/* Progress Bar */}
            <LinearProgress
              variant="determinate"
              value={results.score}
              sx={{ height: "20px", borderRadius: "10px", my: 2 }}
              color={results.score > 60 ? "success" : "error"}
            />

            {/* Charts */}
            <Grid container spacing={4}>
              <Grid item xs={12} md={6}>
                <PieChart width={250} height={250}>
                  <Pie
                    data={[
                      { name: "Matched Skills", value: results.matched_skills.length },
                      { name: "Missing Skills", value: results.missing_skills.length },
                    ]}
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    dataKey="value"
                    label
                  >
                    <Cell fill={COLORS[0]} />
                    <Cell fill={COLORS[1]} />
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </Grid>

              <Grid item xs={12} md={6}>
                <BarChart
                  width={300}
                  height={250}
                  data={results.missing_skills.map((skill) => ({ skill, value: 5 }))}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="skill" angle={-30} textAnchor="end" interval={0} />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="value" fill="#872c35ff" />
                </BarChart>
              </Grid>
            </Grid>

            {/* Skills */}
            <Typography variant="h6" sx={{ mt: 3 }}>
              ‚úÖ Matched Skills:
            </Typography>
            <List>
              {results.matched_skills.map((skill, idx) => (
                <ListItem key={idx}>
                  <Chip label={skill} color="success" />
                </ListItem>
              ))}
            </List>

            <Typography variant="h6">‚ùå Missing Skills (with Resources):</Typography>
            <List>
              {results.missing_skills.map((skill, idx) => (
                <ListItem key={idx}>
                  <ListItemText
                    primary={
                      <span style={{ color: "red" }}>
                        {skill}{" "}
                        {results.recommendations &&
                          results.recommendations[skill] && (
                            <a
                              href={results.recommendations[skill]}
                              target="_blank"
                              rel="noopener noreferrer"
                              style={{ color: "blue" }}
                            >
                              üëâ Learn here
                            </a>
                          )}
                      </span>
                    }
                  />
                </ListItem>
              ))}
            </List>

            {/* Download PDF Button */}
            <Box sx={{ mt: 3 }}>
              <Button variant="contained" color="primary" onClick={handleDownloadPDF}>
                üì• Download Report as PDF
              </Button>
            </Box>
          </Box>
        )}
      </CardContent>
    </Card>
  );
}

export default ResumeAnalyzer;
